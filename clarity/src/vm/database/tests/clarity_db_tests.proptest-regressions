# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 44a2de005734c41ec4acdb6ee75d149396bd7eef4da14a5394136bf2709c57bc # shrinks to contract = Contract { contract_context: ContractContext { contract_identifier: QualifiedContractIdentifier { issuer: StandardPrincipalData(SFZ9QYBVSPEMR0N5TNE04KKADNKK5CC4WGPVJ9E3), name: ContractName("a") }, variables: StacksHashMap({}), functions: StacksHashMap({ClarityName("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"): DefinedFunction { identifier: FunctionIdentifier { identifier: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" }, name: ClarityName("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), arg_types: [], define_type: Public, arguments: [ClarityName("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")], body: SymbolicExpression { expr: Field(TraitIdentifier { name: ClarityName("aaaqxfqzdtenocsexxufoapwudixroehnpfrwejw"), contract_identifier: QualifiedContractIdentifier { issuer: StandardPrincipalData(SXVR4HA3ZP608RM0VW842ME3MBGPPGME3AXR05PG), name: ContractName("CIzVzDUEJpztkQgAnXpbQ") } }), id: 8322152634755796411 } }}), defined_traits: StacksHashMap({ClarityName("yqjoixyngkmxxymzotyuprvihevanobhauphmaea"): {ClarityName("fwnbpjiolicgdlvidojzwsxnukukgnorxftwxxib"): FunctionSignature { args: [OptionalType(BoolType), ResponseType((IntType, NoType))], returns: OptionalType(SequenceType(StringType(UTF8(StringUTF8Length(14))))) }}}), implemented_traits: StacksHashSet({TraitIdentifier { name: ClarityName("amuosfpuavlsrfxrjgpiovauqrrbztmrdeyvowae"), contract_identifier: QualifiedContractIdentifier { issuer: StandardPrincipalData(SP1J7XCE1PBAP3T5RXQB198714S6VB5NCWC15XWWH), name: ContractName("ohTSbunZmLnHHLKmOXW") } }, TraitIdentifier { name: ClarityName("btsssgqmytkeuvrcevlvfjubrqgidbaiyfhbpeqf"), contract_identifier: QualifiedContractIdentifier { issuer: StandardPrincipalData(S02599A868C3Z6JZSTED37HHKV3XTT4QVS80JEYMR), name: ContractName("MgMNMSrWqgrXYaDBPHkFWVZ") } }}), persisted_names: StacksHashSet({ClarityName("vwmatxcbwcqikstlcpobbbgrwkztotfvtqbvrwws"), ClarityName("bnvgwubsasnhjsgxqyqaigaxgnxvmttrlzphzhgu"), ClarityName("edjpvbitaeszopxsyfeecylkhwiudexmklwbnzrt")}), meta_data_map: StacksHashMap({ClarityName("rccoqoirtsdyqkctrbsvoakrhbzufgbhsborwbxz"): DataMapMetadata { key_type: TupleType(TupleTypeSignature { "IzFLwirBWTTeQxCW": (buff 114), "KpRwliLw": uint, "SpPPzWMrDrYq": (buff 62), "UGwUCEU": (buff 61), "kstVrzo": (string-utf8 31), "yFtTFUqvIRm": (string-utf8 17),}), value_type: ResponseType((PrincipalType, SequenceType(StringType(UTF8(StringUTF8Length(22)))))) }, ClarityName("hzimmazvkedqordbdaywazyskqdhdzzqusdnedwo"): DataMapMetadata { key_type: ResponseType((UIntType, BoolType)), value_type: TupleType(TupleTypeSignature { "DXboPISrAIudN": int, "PRhPHewsyHFff": (response (string-utf8 20) (string-utf8 15)), "lIO": (string-ascii 127), "mvQRanZgRpcGcct": uint,}) }, ClarityName("txwizbtmdrypbggfmnuqergiszydhxnlorlsbtwa"): DataMapMetadata { key_type: OptionalType(SequenceType(StringType(ASCII(BufferLength(79))))), value_type: ResponseType((NoType, SequenceType(StringType(ASCII(BufferLength(123)))))) }}), meta_data_var: StacksHashMap({ClarityName("kevhnvabdsujgvsxnixkcnjxlsaqwmwcdhjrrwfi"): DataVariableMetadata { value_type: SequenceType(ListType(ListTypeData { max_len: 12, entry_type: SequenceType(BufferType(BufferLength(100))) })) }, ClarityName("kifjvjytlvijyxnnhdbpmdppttpbugjtvpcjspvv"): DataVariableMetadata { value_type: OptionalType(SequenceType(StringType(ASCII(BufferLength(88))))) }}), meta_nft: StacksHashMap({ClarityName("flnkzucidxkpmohmioosxupwhvaugcczrexdxyky"): NonFungibleTokenMetadata { key_type: OptionalType(UIntType) }, ClarityName("zualwtsklswtrycjhvzajfhjikeayznwxavurltn"): NonFungibleTokenMetadata { key_type: UIntType }}), meta_ft: StacksHashMap({ClarityName("raaodzfstgmvfmhmzpbkmolwmuwlymlbalsntqme"): FungibleTokenMetadata { total_supply: None }}), data_size: 20, clarity_version: Clarity1 } }
